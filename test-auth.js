// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const testAuth = async () => {
  const baseUrl = 'http://localhost:3000/api'
  const phone = '+998 90 123 45 67'
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
  console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phone)
  
  try {
    // 1. –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞
    console.log('\n1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
    const requestResponse = await fetch(`${baseUrl}/auth/request-code`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ phone })
    })
    
    const requestData = await requestResponse.json()
    console.log('–û—Ç–≤–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞:', requestData)
    
    if (!requestData.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞:', requestData.error)
      return
    }
    
    // 2. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ª—é–±—ã–º –∫–æ–¥–æ–º (–≤ dev-—Ä–µ–∂–∏–º–µ)
    console.log('\n2Ô∏è‚É£ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞...')
    const testCode = '123456'
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:', testCode)
    
    const verifyResponse = await fetch(`${baseUrl}/auth/verify-code`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ phone, code: testCode })
    })
    
    const verifyData = await verifyResponse.json()
    console.log('–û—Ç–≤–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyData)
    
    if (verifyData.success) {
      console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', verifyData.user.name)
      console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!verifyData.token)
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyData.error)
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAuth() 